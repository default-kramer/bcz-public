[gd_scene load_steps=10 format=2]

[ext_resource path="res://Sprites/vat-fg.png" type="Texture" id=1]
[ext_resource path="res://Sprites/vat-bg.png" type="Texture" id=2]
[ext_resource path="res://Sprites/vat-liquid.png" type="Texture" id=3]
[ext_resource path="res://Sprites/engine2.png" type="Texture" id=4]

[sub_resource type="CSharpScript" id=1]
resource_name = "PenaltyViewerControl"
script/source = "using Godot;
using System;

public class PenaltyViewerControl : Control
{
    // Declare member variables here. Examples:
    // private int a = 2;
    // private string b = \"text\";

    // Called when the node enters the scene tree for the first time.
    public override void _Ready()
    {
        
    }

//  // Called every frame. 'delta' is the elapsed time since the previous frame.
//  public override void _Process(float delta)
//  {
//      
//  }
}
"

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

uniform float crop = 0.8; // crops bottom of image

vec2 random2(vec2 p) {
    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
}

void fragment() {
    vec2 scale = vec2(25.0, 170.0);
    vec2 st = UV * scale;
    vec2 i_st = floor(st);
    vec2 f_st = fract(st);
    float m_dist = 100.;  // minimum distance
    vec2 uv = st;
    for(int y = -1; y <= 1; ++y){
        for(int x = -1; x <= 1; ++x){
             vec2 neighbor = vec2(float(x),float(y));
            vec2 point = random2(i_st + neighbor);
            point = 0.5 + 0.5*sin(TIME + 6.2831*point);
            vec2 diff = neighbor + point - f_st;
            float dist = length(diff);

            // Keep the closer distance
            if(dist < m_dist){
             m_dist = dist;
                uv = st + diff;
            }
        }
    }
    uv /= scale;
    if (UV.y > crop) {
        COLOR = vec4(0.0, 0.0, 0.0, 0.0);
    } else {
        COLOR = texture(TEXTURE, uv);
    }
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/crop = 0.8

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

const vec3 green = vec3(0.1, 0.5, 0.42);
uniform float sp_adjustedTime = 0; // like TIME, but slows down
uniform float sp_period = 0.8;

// 2D Random
float random (in vec2 st) {
    return fract(sin(dot(st.xy,
                         vec2(12.9898,78.233)))
                 * 43758.5453123);
}

// 2D Noise based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
float noise (in vec2 st) {
    vec2 i = floor(st);
    vec2 f = fract(st);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));

    // Smooth Interpolation

    // Cubic Hermine Curve.  Same as SmoothStep()
    vec2 u = f*f*(3.0-2.0*f);
    // u = smoothstep(0.,1.,f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

void fragment() {
    float time = sp_adjustedTime;
    float period = sp_period;
    //time = TIME; // for testing
    vec4 color = vec4(0, 0, 0, 1);
    float cycler = mod(time, period) / period;
    const float start = 0.0;
    const float rolloff = 0.2;
    const float end = 0.3;
    float expansion = smoothstep(start, rolloff, cycler) - smoothstep(rolloff, end, cycler);
    float targetDistance = smoothstep(start, end, cycler) * 0.7;
    targetDistance += step(end, cycler); // make sure value is >1 beyond `end`
    float actualDistance = abs(distance(UV, vec2(0.5, 0.5)));
    float pixelIntensity = max(0.0, (0.1 - abs(actualDistance - targetDistance)) * 10.0);
    pixelIntensity = max(pixelIntensity, (0.2 - actualDistance) * (0.6 + expansion) * 12.0);
    color.rgba = vec4(green * (0.4 + pixelIntensity * 1.8), pixelIntensity);

    vec2 coord = UV * 55.0 - vec2(floor(time / period) * 10.0, 0);
    float haze = noise(coord) * step(actualDistance, targetDistance);
    haze *= 1.0 - smoothstep(end, 1.0, cycler); // fade out
    color = max(color, vec4(green, haze));

    COLOR = color;
}
"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/sp_adjustedTime = 0.0
shader_param/sp_period = 0.8

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = -1024.0
margin_bottom = -600.0
rect_min_size = Vector2( 100, 500 )
script = SubResource( 1 )

[node name="TankBackground" type="Sprite" parent="."]
texture = ExtResource( 2 )

[node name="TankBorder" type="Sprite" parent="."]
z_index = 2
texture = ExtResource( 1 )

[node name="Liquid" type="Sprite" parent="."]
material = SubResource( 3 )
z_index = 1
texture = ExtResource( 3 )

[node name="Engine" type="Sprite" parent="."]
texture = ExtResource( 4 )

[node name="Cylinder" type="ColorRect" parent="."]
material = SubResource( 5 )
margin_top = 333.0
margin_right = 40.0
margin_bottom = 373.0
color = Color( 1, 1, 1, 0 )

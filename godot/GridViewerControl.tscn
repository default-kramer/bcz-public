[gd_scene load_steps=23 format=2]

[ext_resource path="res://GridViewerControl.cs" type="Script" id=1]
[ext_resource path="res://Sprites/joined-d.bmp" type="Texture" id=2]
[ext_resource path="res://Sprites/single.bmp" type="Texture" id=3]
[ext_resource path="res://Sprites/joined-u.bmp" type="Texture" id=4]
[ext_resource path="res://Sprites/joined-r.bmp" type="Texture" id=5]
[ext_resource path="res://Sprites/joined-l.bmp" type="Texture" id=6]
[ext_resource path="res://background.jpg" type="Texture" id=7]
[ext_resource path="res://Sprites/enemy.bmp" type="Texture" id=8]

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;

const vec3 corruptColor = vec3(0.337, 0.161, 0.098);

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float corruptionCrawl(vec2 uv) {
    vec2 randseed = uv;
    float cycle = mod(TIME, 100.0) / 99.0;
    randseed = mod(randseed + vec2(cycle, cycle), vec2(1.0, 1.0));
    vec2 rand2 = random(ceil(randseed * 95.0));
    float rand = step(-0.6, rand2.x);
    return rand;
}

void fragment() {
    vec4 tex = texture(TEXTURE, UV);
    vec4 color = tex;
    color.rgb = color.rgb * vec3(0.1, 0.35, 0.05);
    float corruption = smoothstep(0.3, 0.4, UV.y);
    float rand = corruptionCrawl(UV);
    color.rgb = mix(color.rgb, tex.rgb * corruptColor, corruption * rand);
    COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )

[sub_resource type="Shader" id=7]
code = "shader_type canvas_item;

uniform vec3 my_color;
uniform float my_alpha;

void fragment() {
    vec4 color = texture(TEXTURE, UV);
    color.rgb = my_color * color.rgb;
    color.a = min(color.a, my_alpha);
    COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/my_color = null
shader_param/my_alpha = null

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

uniform vec3 my_color;
uniform float my_alpha;

void fragment() {
    vec4 color = texture(TEXTURE, UV);
    color.rgb = my_color * color.rgb;
    color.a = min(color.a, my_alpha);
    COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 9 )
shader_param/my_color = null
shader_param/my_alpha = null

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform vec3 my_color;
uniform float my_alpha;

void fragment() {
    vec4 color = texture(TEXTURE, UV);
    color.rgb = my_color * color.rgb;
    color.a = min(color.a, my_alpha);
    COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/my_color = null
shader_param/my_alpha = null

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform vec3 my_color;
uniform float my_alpha;

void fragment() {
    vec4 color = texture(TEXTURE, UV);
    color.rgb = my_color * color.rgb;
    color.a = min(color.a, my_alpha);
    COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 4 )
shader_param/my_color = null
shader_param/my_alpha = null

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform vec3 my_color;
uniform float my_alpha;

void fragment() {
    vec4 color = texture(TEXTURE, UV);
    color.rgb = my_color * color.rgb;
    color.a = min(color.a, my_alpha);
    COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/my_color = null
shader_param/my_alpha = null

[sub_resource type="Shader" id=13]
code = "shader_type canvas_item;

uniform vec3 my_color;
uniform float my_alpha;

void fragment() {
    vec4 color = texture(TEXTURE, UV);
    color.rgb = my_color * color.rgb;
    color.a = min(color.a, my_alpha);
    COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/my_color = null
shader_param/my_alpha = null

[node name="Control" type="Control"]
margin_right = 40.0
margin_bottom = 40.0
script = ExtResource( 1 )

[node name="Background" type="TextureRect" parent="."]
show_behind_parent = true
material = SubResource( 12 )
margin_right = 320.0
margin_bottom = 1280.0
texture = ExtResource( 7 )

[node name="JoinedDown" type="Sprite" parent="."]
visible = false
material = SubResource( 8 )
texture = ExtResource( 2 )

[node name="JoinedLeft" type="Sprite" parent="."]
visible = false
material = SubResource( 10 )
texture = ExtResource( 6 )

[node name="JoinedRight" type="Sprite" parent="."]
visible = false
material = SubResource( 6 )
texture = ExtResource( 5 )

[node name="JoinedUp" type="Sprite" parent="."]
visible = false
material = SubResource( 3 )
texture = ExtResource( 4 )

[node name="Single" type="Sprite" parent="."]
visible = false
material = SubResource( 2 )
texture = ExtResource( 3 )

[node name="Enemy" type="Sprite" parent="."]
visible = false
material = SubResource( 14 )
texture = ExtResource( 8 )

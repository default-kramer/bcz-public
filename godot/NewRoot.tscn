[gd_scene load_steps=11 format=2]

[ext_resource path="res://Controls/GameViewerControl.tscn" type="PackedScene" id=1]
[ext_resource path="res://NewRoot.cs" type="Script" id=2]
[ext_resource path="res://Controls/ControllerSetupControl.tscn" type="PackedScene" id=3]
[ext_resource path="res://Controls/MainMenu.tscn" type="PackedScene" id=8]
[ext_resource path="res://Controls/MainMenu.cs" type="Script" id=9]
[ext_resource path="res://Controls/PuzzleControl.tscn" type="PackedScene" id=10]
[ext_resource path="res://Sprites/heartbreaker.bmp" type="Texture" id=17]
[ext_resource path="res://Controls/TheSpritePool.tscn" type="PackedScene" id=18]

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;

// Don't need a custom my_color here
//uniform vec3 my_color = vec3(1.0, .102, 0.47);
const vec3 my_color = vec3(0.6, 0.2, 0.2);
uniform float my_alpha = 1.0;
uniform float is_corrupt = 1.0; // boolean, 0.0 or 1.0
uniform float destructionProgress = 0.0; // 0.0 means not destroyed, 1.0 means fully destroyed
//const vec3 corruptColor = vec3(0.025, .19, 0.11);
const vec3 corruptColor = vec3(0.025, .1, 0.05);

const float r1 = 0.21;
const float r2 = 0.25;

// Used by the noise functin to generate a pseudo random value between 0.0 and 1.0
vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

vec4 applyFizzle(vec4 color, vec2 uv) {
    float fizzle = destructionProgress;
    //fizzle = max(0.0, sin(TIME * 2.2));
    vec2 rand2 = random(ceil(uv * 30.0)) + 1.0;
    rand2 *= 0.5;
    if (rand2.x < fizzle) {
        color.a = 0.0;
    } else {
        vec3 headroom = vec3(1.0, 1.0, 1.0) - color.rgb;
        headroom = min(vec3(0.6, 0.6, 0.6), headroom);
        color.rgb += headroom * fizzle * fizzle;
    }
    return color;
}

float getGlow(float glow, float width, vec2 uv, float y, vec2 screenUV) {
    float y2 = mod(uv.y + TIME / 6.0, 1.0);
    return max(glow, 1.0 - smoothstep(0.0, width, abs(y2 - y)));
}

void fragment() {
    vec4 tex = texture(TEXTURE, UV);
    vec4 color = tex;
    //color.rgb = my_color * color.rgb;
    color.a = min(color.a, my_alpha);

    if (1.0 > 0.0) {
        // Only mix onto black pixels.
        // Remember that tex.r == tex.g == tex.b
        if (tex.r < 0.1 && tex.a > 0.5) {
            vec2 rand2 = random(ceil(UV * 20.0) + TIME / 200000.0) + 1.0;
            float mixer = step(1.4, rand2.y);
            vec4 toMix = vec4(my_color, 1.0);
            color = mix(toMix, vec4(corruptColor, 1.0), mixer);
        }
    }

    color = applyFizzle(color, UV);

    COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=12]
shader = SubResource( 11 )
shader_param/my_alpha = 1.0
shader_param/is_corrupt = 1.0
shader_param/destructionProgress = 0.0

[node name="Control" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 2 )

[node name="TheSpritePool" parent="." instance=ExtResource( 18 )]

[node name="GameViewer" parent="." instance=ExtResource( 1 )]

[node name="PuzzleControl" parent="." instance=ExtResource( 10 )]

[node name="MainMenu" parent="." instance=ExtResource( 8 )]
margin_left = 50.0
margin_top = 50.0
script = ExtResource( 9 )

[node name="ControllerSetupControl" parent="." instance=ExtResource( 3 )]

[node name="Heartbreaker" type="Sprite" parent="."]
visible = false
material = SubResource( 12 )
texture = ExtResource( 17 )
